# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞: ‚Äú1-–π —á–µ—Ç–≤–µ—Ä–≥ –Ω–æ—è–±—Ä—è‚Äù, ‚Äú3—è —Å—Ä–µ–¥–∞ –º–∞—è‚Äù –∏ —Ç.–ø.
# üìå–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É.
# üìå–õ–æ–≥–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.

import re
import logging
import datetime

DAYS_OF_WEEK = (
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–≤—Ç–æ—Ä–Ω–∏–∫",
    "—Å—Ä–µ–¥–∞",
    "—á–µ—Ç–≤–µ—Ä–≥",
    "–ø—è—Ç–Ω–∏—Ü–∞",
    "—Å—É–±–±–æ—Ç–∞",
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
)

MONTHS = (
    "—è–Ω–≤–∞—Ä—å",
    "—Ñ–µ–≤—Ä–∞–ª—å",
    "–º–∞—Ä—Ç",
    "–∞–ø—Ä–µ–ª—å",
    "–º–∞–π",
    "–∏—é–Ω—å",
    "–∏—é–ª—å",
    "–∞–≤–≥—É—Å—Ç",
    "—Å–µ–Ω—Ç—è–±—Ä—å",
    "–æ–∫—Ç—è–±—Ä—å",
    "–Ω–æ—è–±—Ä—å",
    "–¥–µ–∫–∞–±—Ä—å",

)

FORMAT = "{asctime} | {levelname} -> {msg}"

logging.basicConfig(filename="log.log", encoding="UTF-8", level="ERROR", filemode='a', format=FORMAT, style='{')
logger = logging.getLogger(__name__)


def parse_date(parsed_str: str, patterns):
    for pattern in patterns:
        match = re.match(pattern[:-1], parsed_str.lower())
        if match:
            return pattern
    logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ {parsed_str}")


def date_converter(date_word: str):
    number, weekday, month = date_word.split()

    number = int(re.match(r"\d", number).group())
    weekday = DAYS_OF_WEEK.index(parse_date(weekday, DAYS_OF_WEEK))
    month = MONTHS.index(parse_date(month, MONTHS)) + 1
    year = datetime.datetime.now().year

    temp_number = number
    for i in range(1, 33):
        try:
            week = datetime.date(year, month, i).weekday()
        except ValueError:
            logger.error(f"{number} {DAYS_OF_WEEK[weekday]} –Ω–µ—Ç –≤ –º–µ—Å—è—Ü–µ {MONTHS[month - 1]}")
            return
        if week == weekday:
            temp_number -= 1
            if not temp_number:
                break

    return datetime.date(year, month, i)


print(date_converter("3–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∞–ø—Ä–µ–ª—è"))
