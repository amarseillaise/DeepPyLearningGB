# –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ l8 –ø—Ä–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö,
# –≥–¥–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∏–º—è, –ª–∏—á–Ω—ã–π
# –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç l1 –¥–æ l7) —Å–æ—Ö—Ä–∞–Ω—è—è
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
# –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤
# —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
# –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
# –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.


# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è, –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç l1 –¥–æ l7).
# üìå–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª.
# üìå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞.
# üìå–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–ª—é—á—ë–º –¥–ª—è –∏–º–µ–Ω–∏.
# üìå–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
# üìå–ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.

import json
import os
from l12.Home.task1 import NameValidator

PATH_DB = 'user_db.json'


def load_json():
    if os.path.exists(PATH_DB):
        with open(PATH_DB, 'r', encoding='UTF-l8') as file:
            data = json.load(file)
    else:
        data = {}
    return data


def input_name():
    return input('–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ')


def input_id(dict_users: dict):
    list_id = set()
    for users in dict_users.values():
        for user in users:
            for u_id in user:
                list_id.add(u_id)

    while True:
        u_id = input('–í–≤–µ–¥–∏—Ç–µ ID: ')
        if u_id not in list_id and u_id.isdigit():
            return u_id
        print('–¢–∞–∫–æ–π ID –∑–∞–Ω—è—Ç, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')


def input_lvl():
    while True:
        lvl = input('–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ')
        if lvl.isdigit() and 0 < int(lvl) < 8:
            return lvl


def create_users():
    while True:
        user_db = load_json()
        name = input_name()
        if not name:
            break
        u_id = input_id(user_db)
        lvl = input_lvl()
        if lvl in user_db:
            user_db[lvl].append({u_id: name})
        else:
            user_db[lvl] = [{u_id: name}]
        with open(PATH_DB, 'w', encoding='UTF-l8') as file:
            json.dump(user_db, file, indent=4, ensure_ascii=False)


# create_users()







class User:
    name = NameValidator()

    def __init__(self, name:str, uid: int, access_lvl: int):

        self.name = name
        self.uid = uid
        self.access_lvl = access_lvl

    def __eq__(self, other):
        if isinstance(other, User):
            return self.uid == other.uid

    def __str__(self):
        return f"{self.name}_{self.uid}"

    def __repr__(self):
        return f"{self.name}_{self.uid}"


class UsersDb:
    def __init__(self):
        self.users = []
        self.current = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.current < len(self.users):
            result = self.users[self.current]
            self.current += 1
            return result
        self.current = 0
        raise StopIteration

    def __str__(self):
        result = "["
        for user in self:
            result += f"{user.name}_{user.uid}, "
        result += ']'
        return result

    def __repr__(self):
        result = "["
        for user in self:
            result += f"{user.name}_{user.uid}, "
        result += ']'
        return result


    def add_user(self, user: User):
        self.users.append(user)


usr1 = User("Namea", 1, 5)
usr2 = User("Nameb", 2, 1)
usr3 = User("Namec", 3, 2)
usr4 = User("Named", 4, 3)

db_usr = UsersDb()
db_usr.add_user(usr1)
db_usr.add_user(usr2)

if usr2 not in db_usr:
    db_usr.add_user(usr2)

for u in db_usr:
    print(u)